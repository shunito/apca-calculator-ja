---
export interface Props {
  title: string;
}
const { title } = Astro.props;
---

<a href="#mainContents" class="visually-hidden">メインコンテンツへスキップ</a>
<header class="container">
  <div class="grid">
    <h1 class="page-title">{title}</h1>
    <button class="secondary mode-changer">モード変更</button>
  </div>
  <p class="visually-hidden mode-messanger" aria-live="polite"></p>
  <p class="information">
    <a href="https://www.w3.org/TR/wcag-3.0/">WCAG 3.0</a>にて
    <a href="https://www.w3.org/WAI/GL/WCAG3/2021/how-tos/visual-contrast-of-text/">検討が進められている</a>テキストの視覚的コントラスト基準である
    <a href="https://github.com/Myndex/SAPC-APCA">APCA</a>について、日本語フォントに適応した場合の検討を行うためのシミュレーションを提供しています。</p>
</header>

<script is:inline>
  let _scheme = "light";
  const messanger = document.querySelector("p.mode-messanger");
  const button = document.querySelector("button.mode-changer");

  const preferedColorScheme = () => {
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };

  const applyScheme = () => {
    document.querySelector("html").setAttribute("data-theme", _scheme);
  };

  const messageSchemeChange = () => {
    let scheme = "";
    if (messanger) {
      _scheme === "light" ? (scheme = "ライト") : (scheme = "ダーク");
      messanger.setAttribute("text", `テーマを${scheme}モードに変更しました`);
    }
  };

  const init = () => {
    if (button) {
      button.addEventListener("click", () => {
        _scheme === "light" ? (_scheme = "dark") : (_scheme = "light");
        console.log(_scheme);
        applyScheme();
        messageSchemeChange();
      });
    }
  };

  init();
  _scheme = preferedColorScheme();
  applyScheme();
</script>

<style>
  .container {
    padding: 2rem 0;
  }
  .mode-changer {
    font-size: 80%;
    width: 8rem;
    max-height: 3rem;
  }
  .grid {
    grid-template-columns: 5fr 1fr;
  }

  .information {
    margin-bottom: 0;
  }
</style>
